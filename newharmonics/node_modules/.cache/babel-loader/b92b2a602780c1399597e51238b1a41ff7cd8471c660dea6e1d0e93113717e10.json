{"ast":null,"code":"var _jsxFileName = \"/Users/onorio21/VSCode/NuwHarmonics/1892929_NewHarmonics/newharmonics/src/routes/test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:9000/songs/upload\"; // API Gateway endpoint\n\nfunction SongUploadTest() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [album, setAlbum] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // Helper for fetch error handling (from handsonreact.com example)\n  function checkStatus(response) {\n    if (response.ok) {\n      return response;\n    } else {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n  }\n  const handleUpload = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    const formData = new FormData();\n    if (file) formData.append(\"file\", file);\n    formData.append(\"title\", title);\n    formData.append(\"artist\", artist);\n    formData.append(\"album\", album);\n    formData.append(\"genre\", genre);\n    try {\n      const response = await fetch(BASE_URL, {\n        method: \"POST\",\n        body: formData\n        // Don't set Content-Type! Browser will do for FormData.\n      });\n      checkStatus(response); // throws for non-OK responses\n      setSuccess(\"Upload OK!\");\n      // You could also parse response.json() or .text() if you want a backend message\n    } catch (err) {\n      setError(err.message);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleUpload,\n    encType: \"multipart/form-data\",\n    style: {\n      maxWidth: 400,\n      margin: \"2em auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Song Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Title\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: artist,\n      onChange: e => setArtist(e.target.value),\n      placeholder: \"Artist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: album,\n      onChange: e => setAlbum(e.target.value),\n      placeholder: \"Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: genre,\n      onChange: e => setGenre(e.target.value),\n      placeholder: \"Genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0]),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: loading,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"blue\",\n        marginTop: \"10px\"\n      },\n      children: \"Uploading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"green\",\n        marginTop: \"10px\"\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginTop: \"10px\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(SongUploadTest, \"Si3WSWY9H3AcCN4LW9EF7OG+ToA=\");\n_c = SongUploadTest;\nexport default SongUploadTest;\nvar _c;\n$RefreshReg$(_c, \"SongUploadTest\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","BASE_URL","SongUploadTest","_s","file","setFile","title","setTitle","artist","setArtist","album","setAlbum","genre","setGenre","loading","setLoading","error","setError","success","setSuccess","checkStatus","response","ok","Error","status","statusText","handleUpload","e","preventDefault","formData","FormData","append","fetch","method","body","err","message","onSubmit","encType","style","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","required","files","disabled","color","marginTop","_c","$RefreshReg$"],"sources":["/Users/onorio21/VSCode/NuwHarmonics/1892929_NewHarmonics/newharmonics/src/routes/test.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst BASE_URL = \"http://localhost:9000/songs/upload\"; // API Gateway endpoint\n\nfunction SongUploadTest() {\n  const [file, setFile] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [album, setAlbum] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // Helper for fetch error handling (from handsonreact.com example)\n  function checkStatus(response) {\n    if (response.ok) {\n      return response;\n    } else {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n  }\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    const formData = new FormData();\n    if (file) formData.append(\"file\", file);\n    formData.append(\"title\", title);\n    formData.append(\"artist\", artist);\n    formData.append(\"album\", album);\n    formData.append(\"genre\", genre);\n\n    try {\n      const response = await fetch(BASE_URL, {\n        method: \"POST\",\n        body: formData\n        // Don't set Content-Type! Browser will do for FormData.\n      });\n      checkStatus(response); // throws for non-OK responses\n      setSuccess(\"Upload OK!\");\n      // You could also parse response.json() or .text() if you want a backend message\n    } catch (err) {\n      setError(err.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleUpload} encType=\"multipart/form-data\" style={{ maxWidth: 400, margin: \"2em auto\" }}>\n      <h2>Test Song Upload</h2>\n      <input type=\"text\" value={title} onChange={e => setTitle(e.target.value)} placeholder=\"Title\" required />\n      <input type=\"text\" value={artist} onChange={e => setArtist(e.target.value)} placeholder=\"Artist\" />\n      <input type=\"text\" value={album} onChange={e => setAlbum(e.target.value)} placeholder=\"Album\" />\n      <input type=\"text\" value={genre} onChange={e => setGenre(e.target.value)} placeholder=\"Genre\" />\n      <input type=\"file\" onChange={e => setFile(e.target.files[0])} required />\n      <button type=\"submit\" disabled={loading}>Upload</button>\n      {loading && <div style={{ color: \"blue\", marginTop: \"10px\" }}>Uploading...</div>}\n      {success && <div style={{ color: \"green\", marginTop: \"10px\" }}>{success}</div>}\n      {error && <div style={{ color: \"red\", marginTop: \"10px\" }}>Error: {error}</div>}\n    </form>\n  );\n}\n\nexport default SongUploadTest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}